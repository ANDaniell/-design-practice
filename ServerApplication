using System;
using System.Collections.Generic;
using System.Linq;

// проверка 1
/*
var sessions = new List<MovieSession>
{
    new MovieSession(1, 101, new DateTime(2024, 11, 10, 14, 0, 0), "Main Hall", new List<string> { "A1", "A2", "A3", "A4" }),
    new MovieSession(2, 101, new DateTime(2024, 11, 11, 16, 0, 0), "Side Hall", new List<string> { "A1", "A2", "A3", "A4" }),
    new MovieSession(1, 101, new DateTime(2024, 11, 10, 14, 0, 0), "Main Hall", new List<string> { "A1", "A2", "A3", "A4" }),
    new MovieSession(2, 101, new DateTime(2024, 11, 11, 16, 0, 0), "Side Hall", new List<string> { "B1", "B2", "B3", "B4" })
};

var serverApp = new ServerApplication(sessions);
var movieSessions = serverApp.SessionCheck(101, new DateTime(2024, 11, 10), new DateTime(2024, 11, 12));

foreach (var session in movieSessions)
{
    Console.WriteLine($"Session ID: {session.Id}, StartTime: {session.StartTime}, Hall: {session.Hall}");
}
*/
// проверка 2

var sessions = new List<MovieSession>
{
    new MovieSession(1, 101, new DateTime(2024, 11, 10, 14, 0, 0), "Main Hall", new List<string> { "A1", "A2", "A3", "A4" }),
    new MovieSession(2, 101, new DateTime(2024, 11, 11, 16, 0, 0), "Side Hall", new List<string> { "B1", "B2", "B3", "B4" })
};

var serverApp = new ServerApplication(sessions);

try
{
    var tickets = serverApp.BuyTicket(1, new List<string> { "A1", "A2" });
    foreach (var ticket in tickets)
    {
        Console.WriteLine($"Ticket ID: {ticket.TicketId}, Session ID: {ticket.SessionId}, Seat: {ticket.Seat}");
    }
}
catch (Exception ex)
{
    Console.WriteLine(ex.Message);
}


public class Ticket
{
    public int TicketId { get; set; }
    public int SessionId { get; set; }
    public string Seat { get; set; }

    public Ticket(int ticketId, int sessionId, string seat)
    {
        TicketId = ticketId;
        SessionId = sessionId;
        Seat = seat;
    }
}

public class MovieSession
{
    public int Id { get; set; }
    public int MovieId { get; set; }
    public DateTime StartTime { get; set; }
    public string Hall { get; set; }
    public List<string> AvailableSeats { get; set; } // Список доступных мест

    public MovieSession(int id, int movieId, DateTime startTime, string hall, List<string> availableSeats)
    {
        Id = id;
        MovieId = movieId;
        StartTime = startTime;
        Hall = hall;
        AvailableSeats = availableSeats;
    }
}

public class ServerApplication
{
    private List<MovieSession> sessions;    // Хранилище сеансов
    private int nextTicketId = 1;           // Для генерации уникальных ID билетов

    // Конструктор
    public ServerApplication(List<MovieSession> sessions)
    {
        this.sessions = sessions;
    }

    // Метод для покупки билета
    public List<Ticket> BuyTicket(int sessionId, List<string> requestedSeats)
    {
        // Находим сеанс по идентификатору
        var session = sessions.FirstOrDefault(s => s.Id == sessionId);
        if (session == null)
        {
            throw new Exception("Сеанс не найден.");
        }

        // Проверяем доступность каждого запрашиваемого места
        var unavailableSeats = requestedSeats.Where(seat => !session.AvailableSeats.Contains(seat)).ToList();
        if (unavailableSeats.Any())
        {
            throw new Exception($"Места {string.Join(", ", unavailableSeats)} недоступны для бронирования.");
        }

        // Создаем билеты для запрашиваемых мест
        var tickets = new List<Ticket>();
        foreach (var seat in requestedSeats)
        {
            var ticket = new Ticket(nextTicketId++, sessionId, seat);
            tickets.Add(ticket);
            session.AvailableSeats.Remove(seat);  // Удаляем забронированное место из доступных
        }

        return tickets;
    }

    // Функция для проверки наличия сеансов фильма в указанном диапазоне дат
    public List<MovieSession> SessionCheck(int movieId, DateTime startDate, DateTime endDate)
    {
        // Фильтруем сеансы по ID фильма, диапазону дат и сортируем по залу, затем по времени начала
        var filteredSessions = sessions
            .Where(session => session.MovieId == movieId
                              && session.StartTime >= startDate
                              && session.StartTime <= endDate)
            .OrderBy(session => session.Hall)
            .ThenBy(session => session.StartTime)
            .ToList();

        return filteredSessions;
    }
}
