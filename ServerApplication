using System;
using System.Collections.Generic;
using System.Linq;


var serverApp = new ServerApplication();

// Добавляем фильм
var movie = serverApp.AddMovie("Inception", "Sci-Fi");

// Добавляем сеанс для фильма
var session = serverApp.AddMovieSession(movie.Id, new DateTime(2024, 11, 10, 14, 0, 0), "Main Hall", new List<string> { "A1", "A2", "A3", "A4" });

// Покупаем билеты на сеанс
try
{
    var tickets = serverApp.BuyTicket(session.Id, new List<string> { "A1", "A2" });
    foreach (var ticket in tickets)
    {
        Console.WriteLine($"Ticket ID: {ticket.TicketId}, Session ID: {ticket.SessionId}, Seat: {ticket.Seat}");
    }
}
catch (Exception ex)
{
    Console.WriteLine(ex.Message);
}


public class Ticket
{
    public int TicketId { get; set; }
    public int SessionId { get; set; }
    public string Seat { get; set; }

    public Ticket(int ticketId, int sessionId, string seat)
    {
        TicketId = ticketId;
        SessionId = sessionId;
        Seat = seat;
    }
}

public class Movie
{
    public int Id { get; set; }
    public string Title { get; set; }
    public string Genre { get; set; }

    public Movie(int id, string title, string genre)
    {
        Id = id;
        Title = title;
        Genre = genre;
    }
}

public class MovieSession
{
    public int Id { get; set; }
    public int MovieId { get; set; }
    public DateTime StartTime { get; set; }
    public string Hall { get; set; }
    public List<string> AvailableSeats { get; set; } // Список доступных мест

    public MovieSession(int id, int movieId, DateTime startTime, string hall, List<string> availableSeats)
    {
        Id = id;
        MovieId = movieId;
        StartTime = startTime;
        Hall = hall;
        AvailableSeats = availableSeats;
    }
}

public class ServerApplication
{
    private List<Movie> movies = new List<Movie>();              // Хранилище фильмов
    private List<MovieSession> sessions = new List<MovieSession>();  // Хранилище сеансов
    private int nextMovieId = 1;                                 // Для генерации уникальных ID фильмов
    private int nextSessionId = 1;                               // Для генерации уникальных ID сеансов
    private int nextTicketId = 1;                                // Для генерации уникальных ID билетов

    // Метод для добавления нового фильма
    public Movie AddMovie(string title, string genre)
    {
        var movie = new Movie(nextMovieId++, title, genre);
        movies.Add(movie);
        return movie;
    }

    // Метод для добавления сеанса к существующему фильму
    public MovieSession AddMovieSession(int movieId, DateTime startTime, string hall, List<string> seats)
    {
        // Проверка, существует ли фильм с заданным идентификатором
        var movie = movies.FirstOrDefault(m => m.Id == movieId);
        if (movie == null)
        {
            throw new Exception("Фильм не найден.");
        }

        // Создание сеанса для фильма и добавление его в список сеансов
        var session = new MovieSession(nextSessionId++, movieId, startTime, hall, new List<string>(seats));
        sessions.Add(session);
        return session;
    }

    // Метод для покупки билета
    public List<Ticket> BuyTicket(int sessionId, List<string> requestedSeats)
    {
        // Находим сеанс по идентификатору
        var session = sessions.FirstOrDefault(s => s.Id == sessionId);
        if (session == null)
        {
            throw new Exception("Сеанс не найден.");
        }

        // Проверяем доступность каждого запрашиваемого места
        var unavailableSeats = requestedSeats.Where(seat => !session.AvailableSeats.Contains(seat)).ToList();
        if (unavailableSeats.Any())
        {
            throw new Exception($"Места {string.Join(", ", unavailableSeats)} недоступны для бронирования.");
        }

        // Создаем билеты для запрашиваемых мест
        var tickets = new List<Ticket>();
        foreach (var seat in requestedSeats)
        {
            var ticket = new Ticket(nextTicketId++, sessionId, seat);
            tickets.Add(ticket);
            session.AvailableSeats.Remove(seat);  // Удаляем забронированное место из доступных
        }

        return tickets;
    }
}
